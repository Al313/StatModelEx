anorexia$Prewt
anorexia$Treat
cont <- anorexia[Treat = "Cont"]
cont <- anorexia[anorexia$Treat == "Cont"]
anorexia$Treat
require(MASS)
data(anorexia)
str(anorexia)
cont <- anorexia[anorexia$Treat == "Cont"]
cont <- anorexia[anorexia$Treat == "Cont",]
cont
cbt <- anorexia[anorexia$Treat == "CBT",]
t.test(cont, cbt, paired=T)
length(cont)
length(cbt)
t.test(cbt$Prewt, cbt$Postwt, paired=T)
n = 95
x = 8
p = n / p
n <- 95
x <- 8
p <- n / p
n <- 95
x <- 8
p <- x / n
p
?pbinom
n = 95
x <- 8
p <- x/n
grid <- seq(0, 1, length.out=100)
exact <- pbinom(grid, n, p)
n = 95
x <- 8
p <- x/n
grid <- seq(0, 1, length.out=100)
exact <- pbinom(grid, n, p)
hist(exact)
n = 95
x <- 8
p <- x/n
grid <- seq(0, 1, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact)
exact
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact)
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s")
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s", col="red")
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s", col="red")
lines(exact+1, type="s", col="blue")
?lines
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s", col="red")
lines(grid, exact+1, type="s", col="blue")
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s", col="red")
lines(grid, exact+1)
?pnorm
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s", col="red")
lines(grid, pnorm(grid, p, p*(1.p)/n), col="blue")
n = 95
x <- 8
p <- x/n
grid <- seq(0, x, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s", col="red")
lines(grid, pnorm(grid, p, p*(1-p)/n), col="blue")
n = 95
x <- 8
p <- x/n
grid <- seq(0, 0.25, length.out=100)
exact <- pbinom(grid, n, p)
plot(grid, exact, type = "s", col="red")
lines(grid, pnorm(grid, p, p*(1-p)/n), col="blue")
n = 95
x <- 8
p <- x/n
binom.test(x, n)
n = 95
x <- 8
p <- x/n
binom.test(x, n)$conf.int
n = 95
x <- 8
p <- x/n
binom.test(x, n)$conf.int
prop.test(x, n, p)$conf.int
n = 95
x <- 8
p <- x/n
binom.test(x, n)$conf.int
prop.test(x, n)$conf.int
n = 95
x <- 8
p <- x/n
binom.test(x, n)
prop.test(x, n)
WilsonCI <- function(x, n) {
p <- x/n
SE <- 1.96 * sqrt((p*(1-p)/n) + 1.96**2 / (4*(n**2)))
Other <- 1 / (1+(1.96**2/n))
res <- (Other * (p + (q**2 / (2*n)) + c(-1, 1) * SE))
}
x <- 8
n <- 95
WilsonCI(x, n)
WilsonCI <- function(x, n) {
p <- x/n
SE <- 1.96 * sqrt((p*(1-p)/n) + 1.96**2 / (4*(n**2)))
Other <- 1 / (1+(1.96**2/n))
res <- (Other * (p + (1.96**2 / (2*n)) + c(-1, 1) * SE))
}
x <- 8
n <- 95
WilsonCI(x, n)
WilsonCI <- function(x, n) {
p <- x/n
SE <- 1.96 * sqrt((p*(1-p)/n) + 1.96**2 / (4*(n**2)))
Other <- 1 / (1+(1.96**2/n))
res <- (Other * (p + (1.96**2 / (2*n)) + c(-1, 1) * SE))
}
x <- 8
n <- 95
res <- WilsonCI(x, n)
res
WilsonCI <- function(x, n) {
p <- x/n
SE <- 1.96 * sqrt((p*(1-p)/n) + 1.96**2 / (4*(n**2)))
Other <- 1 / (1+(1.96**2/n))
res <- (Other * (p + (1.96**2 / (2*n)) + c(-1, 1) * SE))
return res
WilsonCI <- function(x, n) {
p <- x/n
SE <- 1.96 * sqrt((p*(1-p)/n) + 1.96**2 / (4*(n**2)))
Other <- 1 / (1+(1.96**2/n))
res <- (Other * (p + (1.96**2 / (2*n)) + c(-1, 1) * SE))
return(res)
}
x <- 8
n <- 95
res <- WilsonCI(x, n)
res
?cbind
alpha = 0.05
tab <- as.table(rbind(c(9, 5), c(18, 22)))
rownames(tab) <- c("Cleared", "Not Cleared")
colnames(tab) <- c("Treatment A", "Treatment B")
tab
?binom.test
alpha = 0.05
tab <- as.table(rbind(c(9, 5), c(18, 22)))
rownames(tab) <- c("Cleared", "Not Cleared")
colnames(tab) <- c("Treatment A", "Treatment B")
tab
# Treatment A
n = 9 + 18
x = 9
binom.test(x, n) # Exact
# Treatment B
alpha = 0.05
tab <- as.table(rbind(c(9, 5), c(18, 22)))
rownames(tab) <- c("Cleared", "Not Cleared")
colnames(tab) <- c("Treatment A", "Treatment B")
tab
# Treatment A
n = 9 + 18
x = 9
binom.test(x, n) # Exact
approximate <- WilsonCI(x, n)
# Treatment B
alpha = 0.05
tab <- as.table(rbind(c(9, 5), c(18, 22)))
rownames(tab) <- c("Cleared", "Not Cleared")
colnames(tab) <- c("Treatment A", "Treatment B")
tab
# Treatment A
n = 9 + 18
x = 9
binom.test(x, n) # Exact
approximate <- WilsonCI(x, n) # Approx
approximate
# Treatment B
alpha = 0.05
tab <- as.table(rbind(c(9, 5), c(18, 22)))
rownames(tab) <- c("Cleared", "Not Cleared")
colnames(tab) <- c("Treatment A", "Treatment B")
tab
# Treatment A
n = 9 + 18
x = 9
binom.test(x, n) # Exact
approximate <- WilsonCI(x, n) # Approx
approximate
# Treatment B
n = 5 + 22
x = 5
binom.test(x,n)
alpha = 0.05
tab <- as.table(rbind(c(9, 5), c(18, 22)))
rownames(tab) <- c("Cleared", "Not Cleared")
colnames(tab) <- c("Treatment A", "Treatment B")
tab
WaldCI<-function(x,n) {
se<-sqrt(x*(n-x)/n^3)
return(round(cbind(pmax(0,x/n-1.96*se),pmin(1,x/n+1.96*se)),4))
}
# Treatment A
n = 9 + 18
x = 9
wald <- WaldCI(x, n) # Wald
wilson <- WilsonCI(x, n) # Wilson
wald
wilson
# Treatment B
n = 5 + 22
x = 5
ORCI<-function(x1,x2,n1,n2) {
p1<-x1/n1
p2<-x2/n2
logOR<-log((p1/(1-p1))/(p2/(1-p2)))
SElog<-sqrt(1/x1+1/x2+1/(n1-x1)+1/(n2-x2))
ci<-c(exp(logOR-1.96*SElog),exp(logOR+1.96*SElog))
return(round(ci,4))
}
RRCI<-function(x1,x2,n1,n2) {}
p1<-x1/n1
ORCI<-function(x1,x2,n1,n2) {
p1<-x1/n1
p2<-x2/n2
logOR<-log((p1/(1-p1))/(p2/(1-p2)))
SElog<-sqrt(1/x1+1/x2+1/(n1-x1)+1/(n2-x2))
ci<-c(exp(logOR-1.96*SElog),exp(logOR+1.96*SElog))
return(round(ci,4))
}
RRCI<-function(x1,x2,n1,n2) {
p1<-x1/n1
p2<-x2/n2
logRR<-log(p1)-log(p2)
SElog<-sqrt(1/x1-1/n1+1/x2-1/n2)
ci<-c(exp(logRR-1.96*SElog),exp(logRR+1.96*SElog))
return(round(ci,4))
}
require(datasets)
data(mtcars)
str(mtcars)
?mtcars
?location
require(datasets)
data(mtcars)
str(mtcars)
summary(mtcars$mpg)
summary(mtcars$cyl)
summary(mtcars$wt)
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
data <- read.table('pima.txt', header=T, sep=",")
str(data)
?cor
data <- read.table('pima.txt', header=T, sep=",")
str(data)
data$test <- as.factor(data$test)
data <- read.table('pima.txt', header=T, sep=",")
data$test <- as.factor(data$test)
str(data)
data <- read.table('pima.txt', header=T, sep=",")
#data$test <- as.factor(data$test)
str(data)
data <- read.table('pima.txt', header=T, sep=",")
data$test <- as.factor(data$test)
str(data)
data$test
data <- read.table('pima.txt', header=T, sep=",")
data$test <- as.factor(data$test)
cor(data$bmi, data$test = 1)
data <- read.table('pima.txt', header=T, sep=",")
data$test <- as.factor(data$test)
cor(data$bmi, data$test)
data <- read.table('pima.txt', header=T, sep=",")
cor(data$bmi, data$test)
data <- read.table('pima.txt', header=T, sep=",")
cor(data$bmi, data$test)
cor(data$diastolic, data$bmi)
?anova
data <-  read.csv("fat.csv", header=T, sep=",")
str(data)
data2 = subset(data, select = -c(z1,z2,z3,z4,z5,z6,Per.body.fat.Brozek,Density,Adiposity.index,Fat.free.weight,inv.Density) )
data2 = subset(data, select = c(Perc.body.fat.Siri,Age,Weight,Height,Neck.circ,Chest.circ,Abdomen.circ,Hip.circ,Thigh.circ,Knee.circ,Ankle.circ,Biceps.circ,Forearm.circ,Wrist.circ) )
data2 = subset(data, select = c(Perc.body.fat.Siri,Age,Weight,Height,Neck.circ,Chest.circ,Abdomen.circ,Hip.circ,Thigh.circ,Knee.circ,Ankle.circ,Biceps.circ,Forearm.circ,Wrist.circ) )
str(data2)
data2 = subset(data, select = c(Perc.body.fat.Siri,Age,Weight,Height,Neck.circ,Chest.circ,Abdomen.circ,Hip.circ,Thigh.circ,Knee.circ,Ankle.circ,Biceps.circ,Forearm.circ,Wrist.circ) )
summary(data2)
data2 = subset(data, select = c(Perc.body.fat.Siri,Age,Weight,Height,Neck.circ,Chest.circ,Abdomen.circ,Hip.circ,Thigh.circ,Knee.circ,Ankle.circ,Biceps.circ,Forearm.circ,Wrist.circ) )
summary(data2)
plot(data2)
model <- lm(Perc.body.fat.Siri ~ ., data=data2)
summary(model)
plot(model)
summary(influence.measures(model))
summary(model)
step(model)
step(model)
model2 <- lm(Per.body.fat.Siri ~ Hip.circ + Neck.circ + Age + Weight + Thigh.circ + Forearm.circ + Wrist.circ +  Abdomen.circ, data=data)
step(model)
model2 <- lm(Perc.body.fat.Siri ~ Hip.circ + Neck.circ + Age + Weight + Thigh.circ + Forearm.circ + Wrist.circ +  Abdomen.circ, data=data)
summary(model2)
wristCoef <- summary(model2)$coefficients[14]
wristCoef
wristCoef <- summary(model2)$coefficients[8]
wristCoef
wristCoef <- summary(model2)$coefficients[8]
diff <- 22 * wristCoef - 12 * wristCoef
diff
params <- data.frame(Age=25, Weight=170,Height=70,Neck.circ=40, Chest.circ=100, Abdomen.circ=90, Hip.circ=100, Thigh.circ=60, Knee.circ=40, Ankle.circ=20, Biceps.circ=30, Forearm.circ=30, Wrist.circ=20)
value <- predict(model2, params)
value
params <- data.frame(Age=25, Weight=170,Height=70,Neck.circ=40, Chest.circ=100, Abdomen.circ=90, Hip.circ=100, Thigh.circ=60, Knee.circ=40, Ankle.circ=20, Biceps.circ=30, Forearm.circ=30, Wrist.circ=20)
value <- predict(model2, params)
value
CI <- predict(model2, newdata=params, interval="prediction")
CI
confint(model2, 'Wrist.curc', level=0.99)
confint(model2, 'Wrist.circ', level=0.99)
require(AICcmodavg)
data <-  read.csv("fat.csv", header=T, sep=",")
str(data)
require(AICcmodavg)
data2 <- fat
require(AICcmodavg)
library(AICcmodavg)
require(AICcmodavg)
data2 <- AICcmodavg.fat
install.packages(AICcmodavg)
install.packages("AICcmodavg")
require(AICcmodavg)
data2 <- fat
require(AICcmodavg)
data2 <- fat
---
title:
"Exercise_1 solution"
# Setup
r <- 1000
simulation_df <- data.frame()
for (i in 1:r) {
x <- rnorm(n = n, mean = mu, sd = std_dev_x)
y <- beta_0 + beta_1 * x + rnorm(n = n, mean = 0, sd = std_dev_err)
model <- lm(y ~ x)
simulation_df <- rbind(simulation_df, data.frame(intercept = coef(model)[1], slope = coef(model)[2]))
}
library(ggplot2)
# Setup
set.seed(1)
n <- 15
mu <- 4
std_dev_x <- 4
std_dev_err <- 2
beta_0 <- 1
beta_1 <- 2
# Sample x and build y
x <- rnorm(n = n, mean = mu, sd = std_dev_x)
y <- beta_0 + beta_1 * x + rnorm(n = n, mean = 0, sd = std_dev_err)
# Fit linear model
model <- lm(y ~ x)
summary(model)
# Plot data
data <- data.frame(x, y)
ggplot(data = data, aes(x = x, y = y)) +
geom_point(size = 3) +
geom_abline(intercept = beta_0, slope = beta_1, color = "red", size = 1.5) +
geom_abline(intercept = coef(model)[1], slope = coef(model)[2], color = "blue", size = 1.5)
# Setup
r <- 1000
simulation_df <- data.frame()
for (i in 1:r) {
x <- rnorm(n = n, mean = mu, sd = std_dev_x)
y <- beta_0 + beta_1 * x + rnorm(n = n, mean = 0, sd = std_dev_err)
model <- lm(y ~ x)
simulation_df <- rbind(simulation_df, data.frame(intercept = coef(model)[1], slope = coef(model)[2]))
}
# Plot simulation results
simulation_plot <- ggplot(data = simulation_df, aes(x = intercept, y = slope)) +
geom_point()
for (i in 1:nrow(simulation_df)) {
simulation_plot <- simulation_plot + geom_abline(intercept = simulation_df$intercept[i], slope = simulation_df$slope[i], color = "blue", size = 0.5, linetype = "dashed")
}
simulation_plot + geom_abline(intercept = beta_0, slope = beta_1, color = "red", size = 1.5)
setwd("~/StatModelEx/day3")
library(ggplot2)
library(ggrepel)
library(ggbiplot)
# Setup
data <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
setwd("~/StatModelEx")
# Setup
data <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
pwd
cwd
getwd
getwd()
# Setup
data <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
# Setup
data <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
# Setup
data <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
# Setup
data <- read.csv("day3\data\protein.txt", sep = "\t", header = TRUE)
# Setup
data <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
# Setup
data <- read.csv("../day3/data/protein.txt", sep = "\t", header = TRUE)
# Single Linkage Clustering
single_linkage <- hclust(dist(data[, -1]), method = "single")
plot(single_linkage, main = "Single Linkage Clustering")
# Setup
data <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
# Setup
data <- read.csv("../day3/data/protein.txt", sep = "\t", header = TRUE)
# Single Linkage Clustering
single_linkage <- hclust(dist(data[, -1]), method = "single")
plot(single_linkage, main = "Single Linkage Clustering", xlab = "Countries", sub = "Euclidean Distance")
#install.packages("ggdendro")
library(ggplot2)
library(ggdendro)
# Setup data for clustering
protein <- read.csv("day3/data/protein.txt", sep = "\t", header = TRUE)
#install.packages("ggdendro")
library(ggplot2)
library(ggdendro)
# Setup data for clustering
protein <- read.csv("../day3/data/protein.txt", sep = "\t", header = TRUE)
row.names(protein) <- protein$Country
protein <- protein[, -1]
protein
# Single Linkage Clustering
# Setup
single_linkage <- hclust(dist(protein), method = "single")
# Convert to dendrogram object
dendro <- as.dendrogram(single_linkage)
single_linkage_dendro_data <- dendro_data(dendro)
# Plot the dendrogram
ggplot() +
geom_segment(data = segment(single_linkage_dendro_data), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(single_linkage_dendro_data), aes(x = x, y = y, label = label), hjust = 1, angle = 90) +
labs(title = "Single Linkage Clustering Dendrogram", x = "Countries", y = "Euclidean Distance") +
theme_minimal()
# Complete Linkage Clustering
# Setup
complete_linkage <- hclust(dist(data[, -1]), method = "complete")
# Convert to dendrogram object
dendro <- as.dendrogram(complete_linkage)
complete_linkage_dendro_data <- dendro_data(dendro)
# Replace numeric labels with country names
country_names <- data$Country
complete_linkage_dendro_data$labels$label <- country_names[as.numeric(complete_linkage_dendro_data$labels$label)]
# Plot the dendrogram
ggplot() +
geom_segment(data = segment(complete_linkage_dendro_data), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(complete_linkage_dendro_data), aes(x = x, y = y, label = label), hjust = 1, angle = 90) +
labs(title = "Complete Linkage Clustering Dendrogram", x = "Countries", y = "Euclidean Distance") +
theme_minimal()
# Ward Method Clustering
# Setup
ward_linkage <- hclust(dist(data[, -1]), method = "ward.D2")
# Convert to dendrogram object
dendro <- as.dendrogram(ward_linkage)
ward_linkage_dendro_data <- dendro_data(dendro)
# Replace numeric labels with country names
country_names <- data$Country
ward_linkage_dendro_data$labels$label <- country_names[as.numeric(ward_linkage_dendro_data$labels$label)]
# Plot the dendrogram
ggplot() +
geom_segment(data = segment(ward_linkage_dendro_data), aes(x = x, y = y, xend = xend, yend = yend)) +
geom_text(data = label(ward_linkage_dendro_data), aes(x = x, y = y, label = label), hjust = 1, angle = 90) +
labs(title = "Ward Clustering Dendrogram", x = "Countries", y = "Euclidean Distance") +
theme_minimal()
